<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mike&#39;s Notes</title>
  
  <subtitle>保持自己的好奇心</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gaoneng.work/"/>
  <updated>2018-07-26T01:33:59.342Z</updated>
  <id>http://gaoneng.work/</id>
  
  <author>
    <name>Mike Gao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>android内存泄露常见情景以及解决方案</title>
    <link href="http://gaoneng.work/2018/07/25/android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%B8%B8%E8%A7%81%E6%83%85%E6%99%AF%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://gaoneng.work/2018/07/25/android内存泄露常见情景以及解决方案/</id>
    <published>2018-07-25T11:42:19.000Z</published>
    <updated>2018-07-26T01:33:59.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内存相关的概念"><a href="#内存相关的概念" class="headerlink" title="内存相关的概念"></a>内存相关的概念</h2><h3 id="Java内存分配"><a href="#Java内存分配" class="headerlink" title="Java内存分配"></a>Java内存分配</h3><ul><li>静态储存区：编译时就分配好，在程序整个运行期间都存在。它主要存放静态数据和常量；</li><li>栈区：局部变量，基本类型数据，对象的引用；</li><li>堆区：存放，new出来的对象，由 Java 垃圾回收器回收；</li></ul><h3 id="四种引用类型"><a href="#四种引用类型" class="headerlink" title="四种引用类型"></a>四种引用类型</h3><ul><li>强引用(StrongReference)：JVM 宁可抛出 OOM ，也不会让 GC 回收具有强引用的对象；</li><li>软引用(SoftReference)：只有在内存空间不足时，才会被回的对象；</li><li>弱引用(WeakReference)：在 GC 时，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存；</li><li>虚引用(PhantomReference)：任何时候都可以被GC回收，当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就<br>会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是否存在该对象的虚引用，<br>来了解这个对象是否将要被回收。可以用来作为GC回收Object的标志。</li></ul><h3 id="Android内存管理"><a href="#Android内存管理" class="headerlink" title="Android内存管理"></a>Android内存管理</h3><ul><li>为了整个Android系统的内存控制需要，Android系统为每一个应用程序都设置了一个硬性的Dalvik Heap Size最大限制阈值，<br>这个阈值在不同的设备上会因为RAM大小不同而各有差异。如果你的应用占用内存空间已经接近这个阈值，此时再尝试分配内存的话，<br>很容易引起OutOfMemoryError的错误；</li><li><code>ActivityManager.getMemoryClass()</code>可以用来查询当前应用的Heap Size阈值，这个方法会返回一个整数，表明你的应用<br>的Heap Size阈值是多少Mb(megabates)；</li></ul><h3 id="Android内存泄露"><a href="#Android内存泄露" class="headerlink" title="Android内存泄露"></a>Android内存泄露</h3><p>  <em>我们常说的内存泄漏是指new出来的Object无法被GC回收，即为强引用。通俗来讲，就是对象已不再使用，但是依然持有对它的强引用</em></p><h3 id="检测工具leakcanary"><a href="#检测工具leakcanary" class="headerlink" title="检测工具leakcanary"></a>检测工具<a href="https://github.com/square/leakcanary" target="_blank" rel="noopener">leakcanary</a></h3><p>这里只是单纯用来检测内存泄漏，所以就采用最简单，最直接的工具，其他更强大的检测工具和方法就不在此提及<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> dependencies &#123;</span><br><span class="line">  debugCompile &apos;com.squareup.leakcanary:leakcanary-android:1.5.1&apos;</span><br><span class="line">  releaseCompile &apos;com.squareup.leakcanary:leakcanary-android-no-op:1.5.1&apos;</span><br><span class="line">  testCompile &apos;com.squareup.leakcanary:leakcanary-android-no-op:1.5.1&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="常见内存泄露的情景"><a href="#常见内存泄露的情景" class="headerlink" title="常见内存泄露的情景"></a>常见内存泄露的情景</h2><h3 id="Static-Activities-or-Views"><a href="#Static-Activities-or-Views" class="headerlink" title="Static Activities or Views"></a>Static Activities or Views</h3><p> 在类中定义了静态Activity变量，把当前运行的Activity实例赋值于这个静态变量。如果这个静态变量在Activity生命周期结束后没有清空，就导致内存泄漏。因为static变量是贯穿这个应用的生命周期的，所以被泄漏的Activity就会一直存在于应用的进程中，不会被垃圾回收器回收。</p><h3 id="Inner-Class"><a href="#Inner-Class" class="headerlink" title="Inner Class"></a>Inner Class</h3><p> 因为非静态内部类持有外部类的隐式引用，容易导致意料之外的泄漏。然而内部类可以访问外部类的私有变量，只要我们注意引用的生命周期，就可以避免意外的发生。</p><h3 id="Anonymous-Classes"><a href="#Anonymous-Classes" class="headerlink" title="Anonymous Classes"></a>Anonymous Classes</h3><p> 相似地，匿名类也维护了外部类的引用。所以内存泄漏很容易发生，当在Activity中定义了匿名的AsyncTsk，当异步任务在后台执行耗时任务期间，Activity不幸被销毁了（译者注：用户退出，系统回收），这个被AsyncTask持有的Activity实例就不会被垃圾回收器回收，直到异步任务结束。</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p> 单例的静态特性导致其生命周期同应用一样长。尽量不要持有context，如果需要的话就持有context.getApplicationContext()</p><h3 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h3><p> 当Handler中有延迟的的任务或是等待执行的任务队列过长，由于消息持有对Handler的引用，而Handler又持有对其外部类的潜在引用，这条引用关系会一直保持到消息得到处理，而导致了Activity无法被垃圾回收器回收，而导致了内存泄露.<br><br> 这里根据引用链观测，是Message.target引起的话，说明时外面Handler引起的内存泄露；如果是Message.callback引起的，说明是post的Runable引起的内存泄露</p><h3 id="集合中对象没清理造成的内存泄漏"><a href="#集合中对象没清理造成的内存泄漏" class="headerlink" title="集合中对象没清理造成的内存泄漏"></a>集合中对象没清理造成的内存泄漏</h3><p> 我们通常把一些对象的引用加入到了集合容器（比如ArrayList）中，当我们不需要该对象时，并没有把它的引用从集合中清理掉，这样这个集合就会越来越大。如果这个集合是static的话，那情况就更严重了。所以要在退出程序之前，将集合里的东西clear，然后置为null，再退出程序。</p><h3 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h3><p> 当我们不要使用WebView对象时，应该调用它的destory()函数来销毁它，并释放其占用的内存，否则其占用的内存长期也不能被回收，从而造成内存泄露。</p><h3 id="上面几种内存泄漏具体代码"><a href="#上面几种内存泄漏具体代码" class="headerlink" title="上面几种内存泄漏具体代码"></a>上面几种内存泄漏具体代码</h3><p><a href="https://github.com/gaoneng102/AndroidLeak" target="_blank" rel="noopener">https://github.com/gaoneng102/AndroidLeak</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;内存相关的概念&quot;&gt;&lt;a href=&quot;#内存相关的概念&quot; class=&quot;headerlink&quot; title=&quot;内存相关的概念&quot;&gt;&lt;/a&gt;内存相关的概念&lt;/h2&gt;&lt;h3 id=&quot;Java内存分配&quot;&gt;&lt;a href=&quot;#Java内存分配&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="Android" scheme="http://gaoneng.work/tags/Android/"/>
    
  </entry>
  
</feed>
