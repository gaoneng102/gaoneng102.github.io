<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mike&#39;s Notes</title>
  
  <subtitle>保持自己的好奇心</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gaoneng.work/"/>
  <updated>2018-07-26T03:16:45.084Z</updated>
  <id>http://gaoneng.work/</id>
  
  <author>
    <name>Mike Gao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android组件化思考</title>
    <link href="http://gaoneng.work/2018/07/26/Android%E7%BB%84%E4%BB%B6%E5%8C%96%E6%80%9D%E8%80%83/"/>
    <id>http://gaoneng.work/2018/07/26/Android组件化思考/</id>
    <published>2018-07-26T03:03:35.000Z</published>
    <updated>2018-07-26T03:16:45.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组件化的目标"><a href="#组件化的目标" class="headerlink" title="组件化的目标"></a>组件化的目标</h2><ul><li>代码解耦</li><li>组件单独运行</li><li>跨模块通信</li><li>集成调试</li><li>代码边界</li></ul><h2 id="组件化关键技术点"><a href="#组件化关键技术点" class="headerlink" title="组件化关键技术点"></a>组件化关键技术点</h2><h3 id="代码解耦"><a href="#代码解耦" class="headerlink" title="代码解耦"></a>代码解耦</h3><ul><li>一种是基础库library，这些代码被其他组件直接引用。比如网络库module可以认为是一个library</li><li>另一种我们称之为Component，这种module是一个完整的功能模块</li><li>负责拼装这些组件以形成一个完成app的module，一般我们称之为主项目、主module或者Host</li></ul><h3 id="组件单独运行"><a href="#组件单独运行" class="headerlink" title="组件单独运行"></a>组件单独运行</h3><ul><li>只需要把apply plugin: ‘com.android.library’切换成apply plugin: ‘com.android.application’就可以，但是我们还需要修改下AndroidManifest文件，因为一个单独调试需要有一个入口的actiivity<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(isRunAlone.toBoolean())&#123;</span><br><span class="line">    apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    apply plugin: <span class="string">'com.android.library'</span></span><br><span class="line">&#125;</span><br><span class="line">.....</span><br><span class="line">resourcePrefix <span class="string">"readerbook_"</span></span><br><span class="line">sourceSets &#123;</span><br><span class="line">     main &#123;</span><br><span class="line">           <span class="keyword">if</span> (isRunAlone.toBoolean()) &#123;</span><br><span class="line">                  manifest.srcFile <span class="string">'src/main/runalone/AndroidManifest.xml'</span></span><br><span class="line">                  java.srcDirs = [<span class="string">'src/main/java'</span>,<span class="string">'src/main/runalone/java'</span>]</span><br><span class="line">                  res.srcDirs = [<span class="string">'src/main/res'</span>,<span class="string">'src/main/runalone/res'</span>]</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  manifest.srcFile <span class="string">'src/main/AndroidManifest.xml'</span></span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="跨模块通信"><a href="#跨模块通信" class="headerlink" title="跨模块通信"></a>跨模块通信</h3><ul><li>UI之间的跳转用的是一个中央路由的方式，这里使用阿里的ARouter</li><li>数据传输使用接口回调的方式或者eventbus</li></ul><h3 id="集成调试"><a href="#集成调试" class="headerlink" title="集成调试"></a>集成调试</h3><ul><li>主项目直接依赖各个组件或者通过生成aar的方式进行依赖，组成完整app进行调试</li></ul><h3 id="代码边界"><a href="#代码边界" class="headerlink" title="代码边界"></a>代码边界</h3><ul><li>组件之间不能直接调用，或者主项目不能直接使用组件中的具体类，要保持组件之间严格的独立</li><li>通过自定义gradle插件，将主项目依赖组件的代码放在运行时添加，这样在编译器就无法直接使用组件中的类</li></ul><h2 id="业务拆分"><a href="#业务拆分" class="headerlink" title="业务拆分"></a>业务拆分</h2><h3 id="core基础组件层"><a href="#core基础组件层" class="headerlink" title="core基础组件层"></a>core基础组件层</h3><ul><li>通用的开源库（网络，图片，工具）</li><li>网络库</li><li>自研工具库</li></ul><h3 id="business基础业务组件层"><a href="#business基础业务组件层" class="headerlink" title="business基础业务组件层"></a>business基础业务组件层</h3><ul><li>mvp,mvvm架构的基类</li><li>业务相关的开源UI控件</li><li>业务相关的拓展函数(kotlin相关)</li><li>统一的图片，字符串，主题样式</li></ul><h3 id="commonbusiness通用业务组件层"><a href="#commonbusiness通用业务组件层" class="headerlink" title="commonbusiness通用业务组件层"></a>commonbusiness通用业务组件层</h3><p>这里会包含多个module，每个module只负责唯一一种功能</p><ul><li>登录注册module业务组件</li><li>IM消息module业务组件</li><li>钱包支付module业务组件</li><li>版本更新module业务组件</li><li>调试设置module业务组件</li></ul><h3 id="具体业务层"><a href="#具体业务层" class="headerlink" title="具体业务层"></a>具体业务层</h3><p>实现具体的业务代码，用到通用业务组件，就使用路由跳转，避免直接使用</p><h2 id="组件化工具"><a href="#组件化工具" class="headerlink" title="组件化工具"></a>组件化工具</h2><p>集成调试和组件调试，需要配置不同的android插件，所以需要自定义gradle插件来自动化处理上面的过程<br><a href="https://github.com/luojilab/DDComponentForAndroid" target="_blank" rel="noopener">https://github.com/luojilab/DDComponentForAndroid</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;组件化的目标&quot;&gt;&lt;a href=&quot;#组件化的目标&quot; class=&quot;headerlink&quot; title=&quot;组件化的目标&quot;&gt;&lt;/a&gt;组件化的目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;代码解耦&lt;/li&gt;
&lt;li&gt;组件单独运行&lt;/li&gt;
&lt;li&gt;跨模块通信&lt;/li&gt;
&lt;li&gt;集成调
      
    
    </summary>
    
    
      <category term="Android" scheme="http://gaoneng.work/tags/Android/"/>
    
      <category term="组件化" scheme="http://gaoneng.work/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>在Ubuntu搭建安卓开发环境</title>
    <link href="http://gaoneng.work/2018/07/26/%E5%9C%A8Ubuntu%E6%90%AD%E5%BB%BA%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://gaoneng.work/2018/07/26/在Ubuntu搭建安卓开发环境/</id>
    <published>2018-07-26T01:41:17.000Z</published>
    <updated>2018-07-26T02:16:38.342Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://pcga627s7.bkt.clouddn.com/ubuntuforandroid.png" alt="Ubuntu &amp;&amp; Android"></p><h2 id="安装ubuntu（基于16-04）"><a href="#安装ubuntu（基于16-04）" class="headerlink" title="安装ubuntu（基于16.04）"></a>安装ubuntu（基于16.04）</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p><a href="http://www.linuxdiyf.com/linux/20012.html" target="_blank" rel="noopener">http://www.linuxdiyf.com/linux/20012.html</a></p><ul><li>如果是Windows与Linux双系统安装，请选择其他选项，切记。您可以自己创建、调整分区，或者为 Ubuntu 选择多个分区。</li><li>四个分区即可/boot、/、/home、swap。/home尽量给大点，因为平时使用的主要目录还是这里</li><li>最后一步安装启动程序选择/boot，这样就不会覆盖其他系统的启动</li><li>建议在有线网络下安装，因为wifi可能无法使用，导致安装之后某些图形界面的组件没有正常下载安装导致 “The system is running in low-graphics mode”异常<br><br><a href="https://askubuntu.com/questions/141606/how-to-fix-the-system-is-running-in-low-graphics-mode-error" target="_blank" rel="noopener">https://askubuntu.com/questions/141606/how-to-fix-the-system-is-running-in-low-graphics-mode-error</a></li></ul><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p><a href="http://noogel.xyz/2017/06/17/1.html" target="_blank" rel="noopener">http://noogel.xyz/2017/06/17/1.html</a></p><ul><li><p>更新前先设置源为aliyun的，国内访问速度快。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure></li><li><p>删除Amazon的链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove unity-webapps-common</span><br></pre></td></tr></table></figure></li><li><p>卸载libreOffice(用WPS来替代)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove libreoffice-common</span><br></pre></td></tr></table></figure></li><li><p>删除不常用的软件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjon</span><br><span class="line">sudo apt-get remove gnome-mines cheese transmission-common gnome-orca webbrowser-app gno</span><br><span class="line">sudo apt-get remove onboard deja-dup</span><br></pre></td></tr></table></figure></li></ul><h3 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h3><ul><li><p>先装 Unity 图形管理工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install unity-tweak-tool</span><br></pre></td></tr></table></figure></li><li><p>安装 Flatabulous 主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:noobslab/themes</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install flatabulous-theme</span><br></pre></td></tr></table></figure></li><li><p>安装配套图标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:noobslab/icons</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ultra-flat-icons</span><br></pre></td></tr></table></figure></li><li><p>Arc-Flatabulous 主题（暗黑系）<br><br><a href="https://github.com/andreisergiu98/arc-flatabulous-theme" target="_blank" rel="noopener">https://github.com/andreisergiu98/arc-flatabulous-theme</a></p></li><li><p>paper-icon-theme 图标（扁平化）<br><br><a href="https://github.com/snwh/paper-icon-theme" target="_blank" rel="noopener">https://github.com/snwh/paper-icon-theme</a></p></li><li><p>安装字体(文泉)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install fonts-wqy-microhei</span><br></pre></td></tr></table></figure></li><li><p>鼠标指针 <br><br><a href="https://www.gnome-look.org/content/show.php/Breeze+Serie?content=169316" target="_blank" rel="noopener">https://www.gnome-look.org/content/show.php/Breeze+Serie?content=169316</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install breeze-cursor-theme oxygen-cursor-theme oxygen-cursor-theme-extra</span><br></pre></td></tr></table></figure></li></ul><h3 id="必备软件"><a href="#必备软件" class="headerlink" title="必备软件"></a>必备软件</h3><ul><li><p>vim</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure></li><li><p>git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure></li><li><p>curl <br><br><a href="https://curl.haxx.se/download.html" target="_blank" rel="noopener">https://curl.haxx.se/download.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install curl</span><br></pre></td></tr></table></figure></li><li><p>jq (配合curl 格式化json数据的神器)<br><br><a href="https://stedolan.github.io/jq/" target="_blank" rel="noopener">https://stedolan.github.io/jq/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install jq</span><br></pre></td></tr></table></figure></li><li><p>安装zsh(以及 oh-my-zsh)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure></li><li><p>RAR</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install rar</span><br></pre></td></tr></table></figure></li><li><p>Shadowsocks-Qt5 （客户端，有些加密方式不支持的话就得使用下面命令行）<br><br><a href="https://github.com/shadowsocks/shadowsocks-qt5/wiki/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-qt5/wiki/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure></li><li><p>shadowsocks-libev (命令行版本，定制性和拓展性更强)<br><br><a href="https://github.com/shadowsocks/shadowsocks-libev" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-libev</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install software-properties-common -y</span><br><span class="line">sudo add-apt-repository ppa:max-c-lv/shadowsocks-libev -y</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install shadowsocks-libev</span><br></pre></td></tr></table></figure></li><li><p>chrome <br><br><a href="https://www.google.com/chrome/browser/desktop/index.html" target="_blank" rel="noopener">https://www.google.com/chrome/browser/desktop/index.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure></li><li><p>SwitchyOmega <br><br><a href="https://github.com/FelisCatus/SwitchyOmega/wiki/GFWList" target="_blank" rel="noopener">https://github.com/FelisCatus/SwitchyOmega/wiki/GFWList</a></p></li><li><p>shutter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install shutter</span><br></pre></td></tr></table></figure></li><li><p>搜狗输入法 <br><br><a href="https://pinyin.sogou.com/linux/?r=pinyin" target="_blank" rel="noopener">https://pinyin.sogou.com/linux/?r=pinyin</a></p></li><li><p>wps <br><br><a href="http://linux.wps.cn/" target="_blank" rel="noopener">http://linux.wps.cn/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i wps-office_10.1.0.5672~a21_amd64.deb</span><br><span class="line">sudo apt-get install -f</span><br></pre></td></tr></table></figure></li><li><p>gimp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gimp</span><br></pre></td></tr></table></figure></li><li><p>System Load Indicator（系统状态指示器）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:indicator-multiload/stable-daily</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install indicator-multiload</span><br></pre></td></tr></table></figure></li><li><p>Atom <br><br><a href="https://atom.io/" target="_blank" rel="noopener">https://atom.io/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i atom-amd64.deb</span><br><span class="line">sudo apt-get -f install</span><br></pre></td></tr></table></figure></li></ul><h3 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h3><ul><li>Qualcomm Atheros Device wifi驱动<br><br><a href="https://askubuntu.com/questions/708061/qualcomm-atheros-device-168c0042-rev-30-wi-fi-driver-installation" target="_blank" rel="noopener">https://askubuntu.com/questions/708061/qualcomm-atheros-device-168c0042-rev-30-wi-fi-driver-installation</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#查看驱动型号</span><br><span class="line">lspci -vvnn | grep Network</span><br><span class="line">#开始安装</span><br><span class="line">sudo apt-get install build-essential linux-headers-$(uname -r) git</span><br><span class="line">echo &quot;options ath10k_core skip_otp=y&quot; | sudo tee /etc/modprobe.d/ath10k_core.conf</span><br><span class="line">wget https://www.kernel.org/pub/linux/kernel/projects/backports/stable/v4.4.2/backports-4.4.2-1.tar.gz</span><br><span class="line">tar -zxvf backports-4.4.2-1.tar.gz</span><br><span class="line">cd backport-4.4.2-1</span><br><span class="line">make defconfig-wifi</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">git clone https://github.com/kvalo/ath10k-firmware.git</span><br><span class="line">sudo cp -r ath10k-firmware/QCA9377 /lib/firmware/ath10k/</span><br><span class="line">sudo cp /lib/firmware/ath10k/QCA9377/hw1.0/firmware-5.bin_WLAN.TF.1.0-00267-1 /lib/firmware/ath10k/QCA9377/hw1.0/firmware-5.bin</span><br><span class="line">#需要重启才能生效</span><br><span class="line"></span><br><span class="line">#如果更新了内核导致wifi驱动失败</span><br><span class="line">cd backports-4.4.2-1</span><br><span class="line">make clean</span><br><span class="line">make defconfig-wifi</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">#查看wifi是否禁用</span><br><span class="line">rfkill list</span><br><span class="line">#开启wifi</span><br><span class="line">rfkill unblock all</span><br></pre></td></tr></table></figure><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li>修改快捷键<br><br><a href="http://www.linuxdiyf.com/linux/22726.html" target="_blank" rel="noopener">http://www.linuxdiyf.com/linux/22726.html</a></li><li>禁用ALT+右键快捷键<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 将默认的Alt+鼠标按键操作窗口（拖动、缩放、显示关闭菜单等）改为Windows键</span><br><span class="line">gsettings set org.gnome.desktop.wm.preferences mouse-button-modifier &apos;&lt;Super&gt;&apos;</span><br><span class="line"># 另外在设置前后可以用来查看设置的值</span><br><span class="line">gsettings get org.gnome.desktop.wm.preferences mouse-button-modifier</span><br><span class="line"># 不要将键值设置为&apos;none&apos;，否则会发现鼠标除了拖动窗口别无用处！!!</span><br></pre></td></tr></table></figure></li></ul><h2 id="安卓开发环境搭建"><a href="#安卓开发环境搭建" class="headerlink" title="安卓开发环境搭建"></a>安卓开发环境搭建</h2><ul><li><p>SDKMAN! CLI <br><br><a href="http://sdkman.io" target="_blank" rel="noopener">http://sdkman.io</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -s &quot;https://get.sdkman.io&quot; | bash</span><br><span class="line">source &quot;$HOME/.sdkman/bin/sdkman-init.sh&quot;</span><br><span class="line">sdk version</span><br></pre></td></tr></table></figure></li><li><p>java(通过上面的sdk命令安装)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdk install java</span><br></pre></td></tr></table></figure></li><li><p>gradle <br><br><a href="https://gradle.org/install/" target="_blank" rel="noopener">https://gradle.org/install/</a><br><br><a href="https://services.gradle.org/distributions/" target="_blank" rel="noopener">https://services.gradle.org/distributions/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sdk install gradle 4.1</span><br><span class="line"># Upgrade with the Gradle Wrapper</span><br><span class="line">./gradlew wrapper --gradle-version=4.1 --distribution-type=bin</span><br></pre></td></tr></table></figure></li><li><p>android studio <br><br><a href="https://developer.android.com/studio/index.html?hl=zh-cn#linux-bundle" target="_blank" rel="noopener">https://developer.android.com/studio/index.html?hl=zh-cn#linux-bundle</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 64位需要安装32位的兼容库</span><br><span class="line">sudo apt-get install -y libc6-i386 lib32stdc++6 lib32gcc1 lib32ncurses5 lib32z1</span><br><span class="line"># android 环境变量</span><br><span class="line">export PATH=/home/gaoneng/Sdk/tools:$PATH</span><br><span class="line">export PATH=/home/gaoneng/Sdk/platform-tools:$PATH</span><br><span class="line"># android studio 环境变量</span><br><span class="line">export PATH=/usr/local/android-studio/bin:$PATH</span><br></pre></td></tr></table></figure></li><li><p>android studio 常用设置<br></p><ol><li><p>系统字体设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Settings –&gt; Appearance ，勾选 Override default fonts by (not recommended)</span><br></pre></td></tr></table></figure></li><li><p>修改默认快捷键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Main menu –&gt; Code –&gt; Completion –&gt; Basic ，修改为你想替换的快捷键组合</span><br></pre></td></tr></table></figure></li><li><p>设置right margin警示线</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Settings –&gt; Editor –&gt; Appearance ，勾选 Show right margin</span><br></pre></td></tr></table></figure></li><li><p>显示行号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Settings –&gt; Editor –&gt; Appearance ，勾选 Show right margin</span><br></pre></td></tr></table></figure></li><li><p>禁用拼写检查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Settings –&gt; Inspections –&gt; Spelling ，取消勾选</span><br></pre></td></tr></table></figure></li><li><p>自动导入设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Settings –&gt; Editor –&gt; Auto Import ，勾选 Add unambiguous improts on the fly</span><br></pre></td></tr></table></figure></li><li><p>android 导入模板文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/keyboardsurfer/idea-live-templates</span><br></pre></td></tr></table></figure></li></ol></li><li><p>android studio 实用插件<br></p><ol><li><p>GsonFormat<br><br>(JsonToKotlinClass 将json装换为kotlin data类<br><a href="https://github.com/wuseal/JsonToKotlinClass" target="_blank" rel="noopener">https://github.com/wuseal/JsonToKotlinClass</a>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">快速将json字符串转换成一个Java Bean，免去我们根据json字符串手写对应Java Bean的过程。</span><br></pre></td></tr></table></figure></li><li><p>Android Parcelable code generator</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JavaBean序列化，快速实现Parcelable接口。</span><br></pre></td></tr></table></figure></li><li><p>adb-idea</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以一键清理缓存并重启APP</span><br></pre></td></tr></table></figure></li><li><p>CodeGlance</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在右边可以预览代码，实现快速定位</span><br></pre></td></tr></table></figure></li><li><p>idea-markdown</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">markdown插件</span><br></pre></td></tr></table></figure></li><li><p>WakaTime</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/wakatime/jetbrains-wakatime</span><br><span class="line">记录你在IDE上的工作时间</span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://pcga627s7.bkt.clouddn.com/ubuntuforandroid.png&quot; alt=&quot;Ubuntu &amp;amp;&amp;amp; Android&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装ubuntu（基于16-04）&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="Android" scheme="http://gaoneng.work/tags/Android/"/>
    
      <category term="Ubuntu" scheme="http://gaoneng.work/tags/Ubuntu/"/>
    
      <category term="Linux" scheme="http://gaoneng.work/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>android内存泄露常见情景以及解决方案</title>
    <link href="http://gaoneng.work/2018/07/25/android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%B8%B8%E8%A7%81%E6%83%85%E6%99%AF%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://gaoneng.work/2018/07/25/android内存泄露常见情景以及解决方案/</id>
    <published>2018-07-25T11:42:19.000Z</published>
    <updated>2018-07-26T02:12:39.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内存相关的概念"><a href="#内存相关的概念" class="headerlink" title="内存相关的概念"></a>内存相关的概念</h2><h3 id="Java内存分配"><a href="#Java内存分配" class="headerlink" title="Java内存分配"></a>Java内存分配</h3><ul><li>静态储存区：编译时就分配好，在程序整个运行期间都存在。它主要存放静态数据和常量；</li><li>栈区：局部变量，基本类型数据，对象的引用；</li><li>堆区：存放，new出来的对象，由 Java 垃圾回收器回收；</li></ul><h3 id="四种引用类型"><a href="#四种引用类型" class="headerlink" title="四种引用类型"></a>四种引用类型</h3><ul><li>强引用(StrongReference)：JVM 宁可抛出 OOM ，也不会让 GC 回收具有强引用的对象；</li><li>软引用(SoftReference)：只有在内存空间不足时，才会被回的对象；</li><li>弱引用(WeakReference)：在 GC 时，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存；</li><li>虚引用(PhantomReference)：任何时候都可以被GC回收，当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就<br>会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是否存在该对象的虚引用，<br>来了解这个对象是否将要被回收。可以用来作为GC回收Object的标志。</li></ul><h3 id="Android内存管理"><a href="#Android内存管理" class="headerlink" title="Android内存管理"></a>Android内存管理</h3><ul><li>为了整个Android系统的内存控制需要，Android系统为每一个应用程序都设置了一个硬性的Dalvik Heap Size最大限制阈值，<br>这个阈值在不同的设备上会因为RAM大小不同而各有差异。如果你的应用占用内存空间已经接近这个阈值，此时再尝试分配内存的话，<br>很容易引起OutOfMemoryError的错误；</li><li><code>ActivityManager.getMemoryClass()</code>可以用来查询当前应用的Heap Size阈值，这个方法会返回一个整数，表明你的应用<br>的Heap Size阈值是多少Mb(megabates)；</li></ul><h3 id="Android内存泄露"><a href="#Android内存泄露" class="headerlink" title="Android内存泄露"></a>Android内存泄露</h3><p>  <em>我们常说的内存泄漏是指new出来的Object无法被GC回收，即为强引用。通俗来讲，就是对象已不再使用，但是依然持有对它的强引用</em></p><h3 id="检测工具leakcanary"><a href="#检测工具leakcanary" class="headerlink" title="检测工具leakcanary"></a>检测工具<a href="https://github.com/square/leakcanary" target="_blank" rel="noopener">leakcanary</a></h3><p>这里只是单纯用来检测内存泄漏，所以就采用最简单，最直接的工具，其他更强大的检测工具和方法就不在此提及<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> dependencies &#123;</span><br><span class="line">  debugCompile <span class="string">'com.squareup.leakcanary:leakcanary-android:1.5.1'</span></span><br><span class="line">  releaseCompile <span class="string">'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'</span></span><br><span class="line">  testCompile <span class="string">'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="常见内存泄露的情景"><a href="#常见内存泄露的情景" class="headerlink" title="常见内存泄露的情景"></a>常见内存泄露的情景</h2><h3 id="Static-Activities-or-Views"><a href="#Static-Activities-or-Views" class="headerlink" title="Static Activities or Views"></a>Static Activities or Views</h3><p> 在类中定义了静态Activity变量，把当前运行的Activity实例赋值于这个静态变量。如果这个静态变量在Activity生命周期结束后没有清空，就导致内存泄漏。因为static变量是贯穿这个应用的生命周期的，所以被泄漏的Activity就会一直存在于应用的进程中，不会被垃圾回收器回收。</p><h3 id="Inner-Class"><a href="#Inner-Class" class="headerlink" title="Inner Class"></a>Inner Class</h3><p> 因为非静态内部类持有外部类的隐式引用，容易导致意料之外的泄漏。然而内部类可以访问外部类的私有变量，只要我们注意引用的生命周期，就可以避免意外的发生。</p><h3 id="Anonymous-Classes"><a href="#Anonymous-Classes" class="headerlink" title="Anonymous Classes"></a>Anonymous Classes</h3><p> 相似地，匿名类也维护了外部类的引用。所以内存泄漏很容易发生，当在Activity中定义了匿名的AsyncTsk，当异步任务在后台执行耗时任务期间，Activity不幸被销毁了（译者注：用户退出，系统回收），这个被AsyncTask持有的Activity实例就不会被垃圾回收器回收，直到异步任务结束。</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p> 单例的静态特性导致其生命周期同应用一样长。尽量不要持有context，如果需要的话就持有context.getApplicationContext()</p><h3 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h3><p> 当Handler中有延迟的的任务或是等待执行的任务队列过长，由于消息持有对Handler的引用，而Handler又持有对其外部类的潜在引用，这条引用关系会一直保持到消息得到处理，而导致了Activity无法被垃圾回收器回收，而导致了内存泄露.<br><br> 这里根据引用链观测，是Message.target引起的话，说明时外面Handler引起的内存泄露；如果是Message.callback引起的，说明是post的Runable引起的内存泄露</p><h3 id="集合中对象没清理造成的内存泄漏"><a href="#集合中对象没清理造成的内存泄漏" class="headerlink" title="集合中对象没清理造成的内存泄漏"></a>集合中对象没清理造成的内存泄漏</h3><p> 我们通常把一些对象的引用加入到了集合容器（比如ArrayList）中，当我们不需要该对象时，并没有把它的引用从集合中清理掉，这样这个集合就会越来越大。如果这个集合是static的话，那情况就更严重了。所以要在退出程序之前，将集合里的东西clear，然后置为null，再退出程序。</p><h3 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h3><p> 当我们不要使用WebView对象时，应该调用它的destory()函数来销毁它，并释放其占用的内存，否则其占用的内存长期也不能被回收，从而造成内存泄露。</p><h3 id="上面几种内存泄漏具体代码"><a href="#上面几种内存泄漏具体代码" class="headerlink" title="上面几种内存泄漏具体代码"></a>上面几种内存泄漏具体代码</h3><p><a href="https://github.com/gaoneng102/AndroidLeak" target="_blank" rel="noopener">https://github.com/gaoneng102/AndroidLeak</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;内存相关的概念&quot;&gt;&lt;a href=&quot;#内存相关的概念&quot; class=&quot;headerlink&quot; title=&quot;内存相关的概念&quot;&gt;&lt;/a&gt;内存相关的概念&lt;/h2&gt;&lt;h3 id=&quot;Java内存分配&quot;&gt;&lt;a href=&quot;#Java内存分配&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="Android" scheme="http://gaoneng.work/tags/Android/"/>
    
  </entry>
  
</feed>
